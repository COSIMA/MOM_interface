import os
from MOM_RPS import MOM_RPS
from utils import get_str_type

class FType_MOM_params(MOM_RPS):
    """ Encapsulates data and methods for MOM6 case parameter files: MOM_input, user_nl.
    """

    supported_formats = ["MOM6_syntax", "json"]

    def __init__(self, input_path, input_format="json"):
        MOM_RPS.__init__(self, input_path, input_format)

        if self.input_format not in FType_MOM_params.supported_formats:
            raise RuntimeError("MOM parameter file format "+file_format+\
                                " not supported")

    def read(self):
        if self.input_format == "MOM6_syntax":
            self._read_MOM6_syntax()
        elif self.input_format == "json":
            self._read_json()
            self._check_json_consistency()


    def _read_MOM6_syntax(self):
        """Reads in input files in MOM6 syntax, e.g., MOM_Input, MOM_override, and user_nl_mom"""

        self.data = dict()
        with open(self.input_path,'r') as param_file:
            within_comment_block = False
            curr_module = "Global"
            for line in param_file:    
                if len(line)>1:
                    line_s = line.split()

                    # check if within comment block.
                    if (not within_comment_block) and line.strip()[0:2] == "/*":
                        within_comment_block = True
    
                    if within_comment_block and line.strip()[-2:] == "*/":
                        within_comment_block = False
                        continue
    
                    if not within_comment_block and line_s[0][0] != "!": # not a single comment line either
                        # check format:
                        if (curr_module=="Global") and line.strip()[-1] == "%":
                            curr_module = line.strip()[:-1]
                        elif curr_module!="Global" and line.strip()[0] == "%":
                            curr_module = "Global"
                        else:
                            # discard override keyword if provided:
                            if line_s[0] == "#override" and len(line_s)>1:
                                line_s = line_s[1:]
                            line_j = ' '.join(line_s)
    
                            # now parse the line:
                            if ("=" in line_j):
                                line_ss     = line_j.split("=")
                                param_str   = (line_ss[0]).strip()  # the first element is the parameter name
                                val_str     = ' '.join(line_ss[1:]) # the rest is tha value string
                                if '!' in val_str:
                                    val_str = val_str.split("!")[0] # discard the comment in val str, if there is
    
                                # add this module if not added before:
                                if not curr_module in self.data:
                                    self.data[curr_module] = dict()

                                # check if param already provided:
                                if param_str in self.data[curr_module]:
                                    raise SystemExit('ERROR: '+param_str+' listed more than once in '+file_name)
    
                                # enter the parameter in the dictionary:
                                self.data[curr_module][param_str] = val_str
                            else:
                                raise SystemExit('ERROR: Cannot parse the following line in user_nl_mom: '+line)
    
            # Check if there is unclosed block:
            if within_comment_block:
                raise SystemExit('ERROR: faulty comment block!')
            if curr_module!="Global":
                raise SystemExit('ERROR: faulty module block!')

        
    def write(self, output_path, case, add_params=dict()):
        """ writes a MOM_input file from a given json parameter file in accordance with
            the guards and additional parameters that are passed. """

        assert self.input_format=="json", "MOM_input file can only be generated from a json input file."
        str_type = get_str_type()


        # Apply the guards on the general data to get the targeted values
        self.infer_guarded_vals(case)

        # Expand cime parameters in values of key:value pairs (e.g., $INPUTDIR)
        self.expand_cime_params_in_vals(case)

        # 2. Now, write MOM_input

        MOM_input_header =\
        """/* WARNING: DO NOT EDIT this file. Any changes you make will be overriden. To make
        changes in MOM6 parameters within CESM framework, use SourceMods or
        user_nl_mom mechanisms.

        This input file provides the adjustable run-time parameters for version 6 of
        the Modular Ocean Model (MOM6), a numerical ocean model developed at NOAA-GFDL.
        Where appropriate, parameters use usually given in MKS units.

        This MOM_input file contains the default configuration for CESM. A full list of
        parameters for this example can be found in the corresponding
        MOM_parameter_doc.all file which is generated by the model at run-time. */\n\n"""

        with open(os.path.join(output_path), 'w') as MOM_input:

            MOM_input.write(MOM_input_header)

            tab = " "*32
            for module in self.data:

                # Begin module block:
                if module != "Global":
                    MOM_input.write(module+"%\n")

                for var in self.data[module]:
                    val = self.data[module][var]["value"]
                    if val==None:
                        continue

                    # eval
                    if (isinstance(val,str_type) and val[0]=='='):
                        try:
                            val = eval(val[1:])
                        except:
                            raise RuntimeError("Cannot evaluate value: "+val+" for variable "+var)

                    # write "variable = value" pair
                    MOM_input.write(var+" = "+ str(val) +"\n")

                    # Write the variable description:
                    var_comments = self.data[module][var]["description"].split('\n')
                    if len(var_comments[-1])==0:
                        var_comments.pop()
                    for line in var_comments:
                         MOM_input.write(tab+"! "+line+"\n")
                    MOM_input.write("\n")

                # End module block:
                if module != "Global":
                    MOM_input.write("%"+module+"\n")

