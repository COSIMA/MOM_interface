#!/usr/bin/env python

"""MOM6 namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys, glob, stat, filecmp, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.utils import run_cmd

logger = logging.getLogger(__name__)

# prepares the input files of a case and places in rundir:
def prep_input(case):
    Buildconf       = case.get_value("CASEBUILD")
    rundir          = case.get_value("RUNDIR")
    srcroot         = case.get_value("SRCROOT")

    # The scope of the following path expansion is limited to this script only,
    # and is needed to import MOM_Params class:
    sys.path.append(os.path.join(srcroot,"components","mom","cime_config"))
    from MOM_RPS import MOM_Params, MOM_input_nml, Input_data_list, Diag_table

    # Make sure that rundir exists. If not, make it:
    if not os.path.exists(rundir):
        os.makedirs(rundir)

    # Parse json files and create MOM6 input files in rundir

    json_templates_dir = os.path.join(srcroot,"components","mom","param_templates","json")

    # Create MOM_input:
    MOM_input_src = os.path.join(json_templates_dir, "MOM_input.json")
    MOM_input_dest = os.path.join(rundir,"MOM_input")
    MOM_input = MOM_Params(MOM_input_src)
    MOM_input.write(MOM_input_dest, case)

    # Create input.nml:
    input_nml_src = os.path.join(json_templates_dir, "input_nml.json")
    input_nml_dest = os.path.join(rundir,"input.nml")
    input_nml = MOM_input_nml(input_nml_src)
    input_nml.write(input_nml_dest, case)

    # Create mom.input_data_list:
    input_data_list_src = os.path.join(json_templates_dir, "input_data_list.json")
    input_data_list_dest = os.path.join(Buildconf,"mom.input_data_list")
    input_data_list = Input_data_list(input_data_list_src)
    input_data_list.write(input_data_list_dest, case)

    # Create diag_table:
    diag_table_src = os.path.join(json_templates_dir, "diag_table.json")
    diag_table_dest = os.path.join(rundir,"diag_table")
    diag_table = Diag_table(diag_table_src)
    diag_table.write(diag_table_dest, case)

    # Create an empty MOM_override:
    with open(os.path.join(rundir,"MOM_override"), 'w') as MOM_override:
        MOM_override.write('! WARNING: DO NOT EDIT this file! Any user change made in this file will be\n')
        MOM_override.write('!          overriden. This file is automatically generated. MOM6 parameter\n')
        MOM_override.write('!          changes may be made via SourceMods or user_nl_mom.\n')
        MOM_override.write('!-------------------------------------------------------------------------\n\n')


def process_SourceMods(case):
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")
    replaceable = ["diag_table", "input.nml", "MOM_input", "MOM_override"]

    # If an input file normally copied from the templates directory is also provided by the user
    # in SourceMods/src.mom/, copy the version provided by the user in SourceMods.src.mom into
    # RUNDIR and so overwrite the default file.
    SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")
    for filename in os.listdir(SourceMods_dir):
        if filename in replaceable:
            run_cmd("cp "+os.path.join(SourceMods_dir,filename)+" "+rundir)


def process_user_nl_mom(case):
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")

    # parse the parameters in user_nl_mom:
    nl_params = read_param_file(caseroot,"user_nl_mom")

    # copy the user_nl_mom parameters into MOM_override:
    if len(nl_params)>0:
        modules = dict()

        # check if a copy of MOM_override is provided in SourceMods:
        SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")
        if "MOM_override" in os.listdir(SourceMods_dir):
            raise SystemExit("ERROR: Cannot provide parameter changes via both SourceMods and user_nl_mom!")

        # parse the MOM_input file:
        MOM_input_params = read_param_file(rundir,"MOM_input")

        with open(os.path.join(rundir,"MOM_override"), 'w') as MOM_override:
            MOM_override.write('! WARNING: DO NOT EDIT this file! Any user change made in this file will be\n')
            MOM_override.write('!          overriden. This file is automatically generated. MOM6 parameter\n')
            MOM_override.write('!          changes may be made via SourceMods or user_nl_mom.\n')
            MOM_override.write('!-------------------------------------------------------------------------\n\n')

            # first determine all the modules:
            for param,module in nl_params:
                if module in modules:
                    modules[module].append(param)
                else:
                    modules[module] = [param]

            # now, write all the parameters (and group the parameters belonging to the same module.)
            for module in modules:
                if module: MOM_override.write(module+"%\n")
                for param in modules[module]:
                    if ((param,module) in MOM_input_params): # parameter is provided in both MOM_input and user_nl_mom
                        if (nl_params[param,module] != MOM_input_params[param,module]):
                            MOM_override.write('#override '+param+' = '+nl_params[param,module]+'\n')
                        else:
                            MOM_override.write('! '+param+' = '+nl_params[param,module]+' !(unchanged)\n')
                    else:
                        MOM_override.write(param+' = '+nl_params[param,module]+'\n')

                if module: MOM_override.write("%"+module+"\n")
                MOM_override.write("\n")



# parses a parameter file (either user_nl_mom or MOM_input) and returns the following dictionary:
#       params_dict[k1,k2] = val
# where k1 is the parameter name, k2 is the module the parameter belongs to, and val is the string
# corresponding to the value of the parameter excluding any trailing comment.
def read_param_file(file_dir,file_name):

    if file_name not in ["MOM_input","user_nl_mom"]:
        raise SystemExit("ERROR: file format unsupported by read_param_file()")

    params_dict = dict()
    with open(os.path.join(file_dir,file_name),'r') as user_nl_mom:
        within_comment_block = False
        current_module = None
        for line in user_nl_mom:
            if len(line)>1:
                line_s = line.split()

                # check if within comment block.
                if (not within_comment_block) and line.strip()[0:2] == "/*":
                    within_comment_block = True

                if within_comment_block and line.strip()[-2:] == "*/":
                    within_comment_block = False
                    continue

                if not within_comment_block and line_s[0][0] != "!": # not a single comment line either
                    # check format:
                    if (not current_module) and line.strip()[-1] == "%":
                        current_module = line.strip()[:-1]
                    elif current_module and line.strip()[0] == "%":
                        current_module = None
                    else:
                        # discard override keyword if provided:
                        if line_s[0] == "#override" and len(line_s)>1:
                            line_s = line_s[1:]
                        line_j = ' '.join(line_s)

                        # now parse the line:
                        if ("=" in line_j):
                            line_ss     = line_j.split("=")
                            param_str   = (line_ss[0]).strip()  # the first element is the parameter name
                            val_str     = ' '.join(line_ss[1:])  # the rest is tha value string
                            if '!' in val_str:
                                val_str = val_str.split("!")[0] # discard the comment in the value string, if there is

                            # check if param already provided:
                            if (param_str,current_module) in params_dict:
                                raise SystemExit('ERROR: '+param_str+' listed more than once in '+file_name)

                            # enter the parameter in the dictionary:
                            params_dict[param_str,current_module] = val_str
                        else:
                            raise SystemExit('ERROR: Cannot parse the following line in user_nl_mom: '+line)

        # Check if there is unclosed block:
        if within_comment_block:
            raise SystemExit('ERROR: faulty comment block!')
        if current_module:
            raise SystemExit('ERROR: faulty module block!')
    return params_dict


# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    """Build the MOM6 namelist """

    # Build the component namelist
    if compname != "mom":
        raise AttributeError

    # prepare all input files
    prep_input(case)

    # process the SourceMods
    process_SourceMods(case)

    # process the SourceMods
    process_user_nl_mom(case)

    return

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "mom")

if __name__ == "__main__":
    _main_func()
